-- TRIGGES
-- Trigger function
/*
CREATE OR REPLACE FUNCTION nome_funcao()
RETURNS TRIGGER AS $$
BEGIN
	--ações
RETURN NEW; (ou OLD)
END;
$$ LANGUAGE PLPGSQL;
*/

-- Trigger -> vincular a função á tabela
/*
CREATE TRIGGER nome_trigger
BEFORE | AFTER evento
ON tabela
FOR EACH ROW | STATEMENT
EXECUTE PROCEDURE nome_funcao();
*/

-- Definir um bonus aos funcionarios de acordo com o salario. 1500 - 3000: bonus de 0.2; 3001 - 5000: bonus de 0.25; acima de 5000: bonus de 0.3

CREATE TABLE funcionarios(
	id_funcionarios SERIAL NOT NULL PRIMARY KEY,
	nome VARCHAR(255) NOT NULL,
	salario NUMERIC NOT NULL,
	bonus NUMERIC NOT NULL
);

CREATE OR REPLACE FUNCTION atualizarBonus()
RETURNS TRIGGER AS $$
BEGIN
	IF (NEW.salario >= 1500 AND NEW.salario <= 3000) THEN
		NEW.bonus := 0.2;

	ELSIF (NEW.salario >= 3001 AND NEW.salario <= 5000) THEN
		NEW.bonus := 0.25;
		
	ELSIF (NEW.salario > 5000) THEN
		NEW.bonus := 0.3;
		
	ELSE 
		NEW.bonus := 0;
		
	END IF;
RETURN NEW;
END;
$$ LANGUAGE PLPGSQL;

CREATE TRIGGER dispararBonus
BEFORE INSERT OR UPDATE
ON funcionarios
FOR EACH ROW
EXECUTE PROCEDURE atualizarBonus();

INSERT INTO funcionarios(nome, salario)
VALUES 	('William', 300),
		('Sal', 6000),
		('OIUY', 2000);

DROP TRIGGER dispararBonus ON funcionarios; -- sempre desvincular antes de dropar
TRUNCATE TABLE funcionarios RESTART IDENTITY;

SELECT * FROM funcionarios;
-------------------------------------------------------------------------------------------------------------------------
-- EX1: /*
Crie uma tabela chamada "estoque" com as colunas "id_produto", "quantidade", "alerta_estoque" e “status”. 
Em seguida, crie um gatilho que verifique se a quantidade em estoque está abaixo do valor de alerta e, se estiver, 
atualize a coluna "status" para 'Baixo' automaticamente.
*/

CREATE TABLE estoque(
	id_produto SERIAL NOT NULL PRIMARY KEY,
	quantidade NUMERIC NOT NULL,
	alerta_estoque NUMERIC NOT NULL,
	status VARCHAR(255) NOT NULL
);

CREATE OR REPLACE FUNCTION atualizarStatus()
RETURNS TRIGGER AS $$
BEGIN
	IF(NEW.quantidade < NEW.alerta_estoque) THEN
		NEW.status := 'Baixo';
		
	ELSE
		NEW.status := 'Alto';
		
	END IF;
RETURN NEW;
END;
$$ LANGUAGE PLPGSQL;

CREATE TRIGGER novoStatus
BEFORE INSERT OR UPDATE
ON estoque
FOR EACH ROW
EXECUTE PROCEDURE atualizarStatus();

INSERT INTO estoque(quantidade, alerta_estoque)
VALUES	(80, 20),
		(10, 20),
		(100, 10);

DROP TRIGGER novoStatus ON estoque; 
TRUNCATE TABLE estoque RESTART IDENTITY;
DROP TABLE estoque;

SELECT * FROM estoque;
-------------------------------------------------------------------------------------------------------------------------
-- EX2: /*
Crie uma tabela chamada "alunos" com as colunas "id_aluno", "nome" e "status". Em seguida,
crie um gatilho que atualize automaticamente o status para 'Ativo' quando um novo aluno for inserido.
*/

CREATE TABLE alunos(
	id_alunos SERIAL PRIMARY KEY,
  	nome VARCHAR(255) NOT NULL,
  	status VARCHAR(255) DEFAULT 'Ativo'
);

CREATE OR REPLACE FUNCTION atualizacaoStatus()
RETURNS TRIGGER AS $$
BEGIN
	NEW.status := 'Ativo';
RETURN NEW;
END;
$$ LANGUAGE PLPGSQL;

CREATE OR REPLACE TRIGGER novoStatus
BEFORE INSERT OR UPDATE
ON alunos
FOR EACH ROW
EXECUTE PROCEDURE atualizacaoStatus();

INSERT INTO alunos(nome)
VALUES 	('João'),
		('Maria');
        
SELECT * FROM alunos;
-------------------------------------------------------------------------------------------------------------------------
-- EX3: /*
Crie uma tabela chamada "notas" com as colunas "id_aluno", "valor" e "status". Crie 
um gatilho que atualize automaticamente o status para 'Aprovado' se o valor 
da nota for maior ou igual a 6 e 'Reprovado' se for menor.
*/

CREATE TABLE notas(
	id_notas SERIAL PRIMARY KEY,
  	valor INT NOT NULL,
  	status VARCHAR(255) NOT NULL
);

CREATE OR REPLACE FUNCTION aprovarAluno()
RETURNS TRIGGER AS $$
BEGIN
	IF (NEW.valor >= 6) THEN
    	NEW.status := 'Aprovado';
    ELSE
    	NEW.status := 'Reprovado';
    END IF;
RETURN NEW;
END;
$$ LANGUAGE PLPGSQL;

CREATE OR REPLACE TRIGGER analisar
BEFORE INSERT OR UPDATE
ON notas
FOR EACH ROW
EXECUTE PROCEDURE aprovarAluno();

INSERT INTO notas(valor)
VALUES	(10),
		(5),
        (7);
        
SELECT * FROM notas;
-----------------------------------------------------------------------------------------------------------------------------
-- EX4: /*
Suponha que você tenha duas tabelas: "contas" com as colunas "id_conta", "saldo" e "cliente_id",e "transacoes" com as colunas 
"id_transacao", "conta_id", "tipo" e "valor". Crie um gatilho que atualize automaticamente o saldo da conta 
após a inserção de uma nova transação,adicionando o valor da transação se o tipo for 
'Depósito' e subtraindo-o se o tipo for 'Retirada'.
*/

CREATE TABLE cliente(
	id_cliente SERIAL NOT NULL PRIMARY KEY,
  	nome VARCHAR(255) NOT NULL
);

CREATE TABLE contas(
	id_contas SERIAL NOT NULL PRIMARY KEY,
  	saldo FLOAT NOT NULL,
  	cliente_id INT NOT NULL REFERENCES cliente(id_cliente)
);

CREATE TABLE transacoes(
	id_transacoes SERIAL NOT NULL PRIMARY KEY,
  	tipo VARCHAR(55) NOT NULL,
  	valor FLOAT NOT NULL,
  	conta_id INT NOT NULL REFERENCES contas(id_contas)
);

CREATE OR REPLACE FUNCTION atualizarSaldo()
RETURNS TRIGGER AS $$
BEGIN
	IF (NEW.tipo ILIKE 'deposito') THEN
    	UPDATE contas
        SET saldo = saldo + NEW.valor
        WHERE id_contas = NEW.conta_id;
    ELSIF (NEW.tipo ILIKE 'retirada') THEN
    	UPDATE contas
        SET saldo = saldo - NEW.valor
        WHERE id_contas = NEW.conta_id;
    ELSE
    	RAISE EXCEPTION 'Operação Inválida! Por favor insira "Deposito" ou "Retirada".';
    END IF;
    RETURN NEW;
END;
$$ LANGUAGE PLPGSQL;

CREATE OR REPLACE TRIGGER novoSaldo
AFTER INSERT OR UPDATE
ON transacoes
FOR EACH ROW
EXECUTE FUNCTION atualizarSaldo();

INSERT INTO cliente(nome)
VALUES 	('William'),
		('William2'),
        ('William3');
        
INSERT INTO contas(saldo, cliente_id)
VALUES 	(1300.00, 3),
		(2500.00, 1),
        (5000.00, 2);
        
DO $$
DECLARE
	operacao VARCHAR(255):= 'retirad';
    vlr FLOAT:= 100.00;
    conta INT := 1;
BEGIN
    INSERT INTO transacoes (tipo, valor, conta_id)
    VALUES 	(operacao, vlr, conta); 
END $$;

SELECT * FROM transacoes;
SELECT * FROM contas;
